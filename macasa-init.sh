#!/bin/bash

PROYECTO=~/macasa-erp
cd $PROYECTO || exit

echo "üì• [macasa-init] Haciendo git pull desde 'dev'..."
git pull origin dev 2>&1 | tee /tmp/gitlog
if grep -q "Already up to date" /tmp/gitlog; then
  echo "‚úÖ El proyecto ya est√° actualizado."
else
  echo "üì¶ Cambios aplicados desde la rama 'dev'."
fi
rm /tmp/gitlog

echo "üñ•Ô∏è [macasa-init] Iniciando Docker Desktop (si aplica)..."
powershell.exe -Command "Start-Process 'C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe'" 2>/dev/null

# Esperar hasta que docker est√© disponible
wait_for_docker() {
  echo "‚åõ Esperando a que Docker est√© listo..."
  local retry=0
  while ! docker info &> /dev/null; do
    sleep 1
    ((retry++))
    if [ "$retry" -gt 20 ]; then
      echo "‚ùå Docker no est√° listo despu√©s de 20 segundos."
      return 1
    fi
  done
  echo "‚úÖ Docker est√° listo."
}

wait_for_docker || exit 1

echo "üíª [macasa-init] Abriendo VS Code en $PROYECTO..."

# Detectar si estamos DENTRO de WSL (entonces usamos code .)
if grep -qi "microsoft" /proc/version; then
  code .
else
  # Estamos en Windows, usar apertura remota con distro correcta
  DISTRO=$(wsl -l --quiet | grep -i ubuntu | head -n 1)
  if [ -z "$DISTRO" ]; then
    echo "‚ùå No se encontr√≥ una distro Ubuntu activa en WSL."
  else
    code --remote "wsl+$DISTRO" "$PROYECTO"
  fi
fi

echo "üßº [macasa-init] Limpiando contenedores Docker..."
docker compose down --remove-orphans

echo "üê≥ [macasa-init] Levantando contenedores Docker..."
docker compose up -d --build

echo "‚úÖ Entorno iniciado exitosamente."
